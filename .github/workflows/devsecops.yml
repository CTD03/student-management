name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

env:
  # náº¿u cáº§n fallback
  DEFAULT_PORT: 8080

jobs:

  # ----------------------
  # 0. prepare dep-check DB (run on demand or nightly)
  # ----------------------
  dep-update:
    name: Dependency-Check DB update (cacheable)
    runs-on: ubuntu-latest
    # you can change this to "workflow_dispatch" or "schedule" to run nightly
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Restore dependency-check cache
        uses: actions/cache@v4
        with:
          path: ~/.dependency-check/data
          key: dep-check-db-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: dep-check-db-${{ runner.os }}-
      - name: Update dependency-check DB
        run: |
          chmod +x mvnw
          ./mvnw org.owasp:dependency-check-maven:update-only -DdataDirectory=${HOME}/.dependency-check/data

  # ----------------------
  # 1. Build
  # ----------------------
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      jar-path: ${{ steps.upload.outputs.artifact-path || '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}

      - name: Make mvnw executable
        run: chmod +x mvnw

      - name: Run tests and build jar
        run: ./mvnw -B clean package

      - name: Upload app artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  # ----------------------
  # 2. SCA - Dependency Check
  # ----------------------
  sca:
    name: SCA (OWASP Dependency-Check)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Restore dependency-check cache
        uses: actions/cache@v4
        with:
          path: ~/.dependency-check/data
          key: dep-check-db-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: dep-check-db-${{ runner.os }}-

      - name: Make mvnw executable
        run: chmod +x mvnw

      - name: Run dependency-check (SCA)
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -Dformat=ALL \
            -DdataDirectory=${HOME}/.dependency-check/data || true

      - name: Upload dependency-check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report-${{ github.run_number }}
          path: target/dependency-check-report.html

  # ----------------------
  # 3. SAST - SonarCloud (handles PR vs branch)
  # ----------------------
  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make mvnw executable
        run: chmod +x mvnw

      - name: Run Sonar (PR mode or Branch mode)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -e
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            echo "Running SonarCloud in PR mode"
            PR_NUMBER=${{ github.event.pull_request.number }}
            ./mvnw -B sonar:sonar \
              -Dsonar.projectKey=CTD03_student-management \
              -Dsonar.organization=ctd03 \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=${SONAR_TOKEN} \
              -Dsonar.pullrequest.key=${PR_NUMBER} \
              -Dsonar.pullrequest.branch=${{ github.head_ref }} \
              -Dsonar.pullrequest.base=${{ github.base_ref }}
          else
            echo "Running SonarCloud in branch mode"
            # GITHUB_REF_NAME is available in the runner environment
            ./mvnw -B sonar:sonar \
              -Dsonar.projectKey=CTD03_student-management \
              -Dsonar.organization=ctd03 \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=${SONAR_TOKEN} \
              -Dsonar.branch.name=${GITHUB_REF_NAME}
          fi

  # ----------------------
  # 4. Container scan - Trivy
  # ----------------------
  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t student-management:${{ github.run_id }} .

      - name: Run Trivy scan and save as JSON
        uses: aquasecurity/trivy-action@v0.34.0
        with:
          image-ref: student-management:${{ github.run_id }}
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH

      - name: Upload Trivy JSON report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ github.run_number }}
          path: trivy-report.json

  # ----------------------
  # 5. Deploy (set env per branch then trigger Render)
  # ----------------------
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Determine env, set secrets into env
        run: |
          echo "GITHUB_REF_NAME='${GITHUB_REF_NAME}'"
          if [ "${GITHUB_REF_NAME}" = "test" ]; then
            echo "ENV=staging" >> $GITHUB_ENV
            echo "DB_URL=${{ secrets.DB_URL_TEST }}" >> $GITHUB_ENV
            echo "DB_USER=${{ secrets.DB_USER_TEST }}" >> $GITHUB_ENV
            echo "DB_PASS=${{ secrets.DB_PASS_TEST }}" >> $GITHUB_ENV
            echo "SERVICE_ID=${{ secrets.RENDER_SERVICE_TEST }}" >> $GITHUB_ENV
            echo "DEPLOY_URL=${{ secrets.RENDER_URL_TEST }}" >> $GITHUB_ENV
          else
            echo "ENV=production" >> $GITHUB_ENV
            echo "DB_URL=${{ secrets.DB_URL_PROD }}" >> $GITHUB_ENV
            echo "DB_USER=${{ secrets.DB_USER_PROD }}" >> $GITHUB_ENV
            echo "DB_PASS=${{ secrets.DB_PASS_PROD }}" >> $GITHUB_ENV
            echo "SERVICE_ID=${{ secrets.RENDER_SERVICE_PROD }}" >> $GITHUB_ENV
            echo "DEPLOY_URL=${{ secrets.RENDER_URL_PROD }}" >> $GITHUB_ENV
          fi

      - name: Print env debug (no secrets)
        run: |
          echo "Deploy env: $ENV"
          echo "Deploy service id: $SERVICE_ID"
          echo "Deploy target URL: $DEPLOY_URL"

      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"

      - name: Wait for app to come up (simple wait)
        run: |
          echo "Waiting 15s for the service to come up..."
          sleep 15

  # ----------------------
  # 6. DAST - OWASP ZAP (run after deploy) - target DEPLOY_URL
  # ----------------------
  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: deploy
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure DEPLOY_URL present
        run: |
          if [ -z "${DEPLOY_URL}" ]; then
            echo "No DEPLOY_URL set, skipping DAST"
            exit 0
          fi
          echo "Target: ${DEPLOY_URL}"

      - name: Run ZAP Baseline scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: '${{ env.DEPLOY_URL }}'
          cmd_options: '-J zap-report.json -r zap-report.html -w zap-report.md'
          format: 'json'
          # you can adjust maxDuration or rules as needed

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-report-${{ github.run_number }}
          path: |
            zap-report.json
            zap-report.html
            zap-report.md

  # ----------------------
  # 7. Notify
  # ----------------------
  notify:
    name: Notify (Discord)
    runs-on: ubuntu-latest
    needs: [deploy, dast]
    if: always()
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS="${{ job.status }}"
          BRANCH="${GITHUB_REF_NAME}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          CONTENT="ðŸš€ Pipeline finished with status: ${STATUS} for **${{ github.repository }}** on branch \`${BRANCH}\`.\nRun: ${RUN_URL}\nApp: ${DEPLOY_URL}"
          payload="{\"content\": \"${CONTENT//\"/\\\"}\"}"
          curl -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_WEBHOOK_URL"
