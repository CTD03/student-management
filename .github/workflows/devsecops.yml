name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x mvnw
      - run: ./mvnw -B clean package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  sca:
    name: SCA (Dependency Check)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x mvnw
      - run: ./mvnw org.owasp:dependency-check-maven:check -Dformat=ALL
      - uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.html
  sast:
    name: SAST (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: chmod +x mvnw
      - env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            ./mvnw -B sonar:sonar \
              -Dsonar.projectKey=CTD03_student-management \
              -Dsonar.organization=ctd03 \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=${SONAR_TOKEN} \
              -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
              -Dsonar.pullrequest.branch=${{ github.head_ref }} \
              -Dsonar.pullrequest.base=${{ github.base_ref }}
          else
            ./mvnw -B sonar:sonar \
              -Dsonar.projectKey=CTD03_student-management \
              -Dsonar.organization=ctd03 \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=${SONAR_TOKEN} \
              -Dsonar.branch.name=${{ github.ref_name }}
          fi
  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
  
      - name: Build Docker image
        run: docker build -t student-management:latest .
  
      - name: Run Trivy scan and save as JSON
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: student-management:latest
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH
  
      - name: Upload Trivy JSON report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ github.run_number }}
          path: trivy-report.json
  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      issues: write     
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run OWASP ZAP Baseline Scan manually
        run: |
          mkdir -p zap-output
          docker run --rm \
            -v "$(pwd)/zap-output:/zap/wrk:rw" \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t https://student-management-p6z0.onrender.com \
            -a -m 5 \
            -r zap-report.html \
            -w zap-report.md \
            -J zap-report.json || true
      - name: Ensure reports exist
        run: |
          cd zap-output
          [ -f zap-report.html ] || echo "<html><body><h1>No Report Generated</h1></body></html>" > zap-report.html
          [ -f zap-report.md ] || echo "# No Report Generated" > zap-report.md
          [ -f zap-report.json ] || echo "{}" > zap-report.json
      - name: Upload ZAP HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: zapreport-html-${{ github.run_number }}
          path: zap-output/zap-report.html

      - name: Upload ZAP JSON Report
        uses: actions/upload-artifact@v4
        with:
          name: zapreport-json-${{ github.run_number }}
          path: zap-output/zap-report.json

      - name: Upload ZAP Markdown Report
        uses: actions/upload-artifact@v4
        with:
          name: zapreport-md-${{ github.run_number }}
          path: zap-output/zap-report.md
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [sca, sast, container-scan, dast]
    steps:
      - name: Set Environment Variables for Branch
        run: |
          if [ "${GITHUB_REF_NAME}" = "test" ]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
            echo "DB_URL=${{ secrets.DB_URL_TEST }}" >> $GITHUB_ENV
            echo "DB_USER=${{ secrets.DB_USER_TEST }}" >> $GITHUB_ENV
            echo "DB_PASS=${{ secrets.DB_PASS_TEST }}" >> $GITHUB_ENV
            echo "SERVICE_ID=${{ secrets.RENDER_SERVICE_ID_TEST }}" >> $GITHUB_ENV
          elif [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
            echo "DB_URL=${{ secrets.DB_URL_PROD }}" >> $GITHUB_ENV
            echo "DB_USER=${{ secrets.DB_USER_PROD }}" >> $GITHUB_ENV
            echo "DB_PASS=${{ secrets.DB_PASS_PROD }}" >> $GITHUB_ENV
            echo "SERVICE_ID=${{ secrets.RENDER_SERVICE_ID_PROD }}" >> $GITHUB_ENV
          else
            echo "‚ùå Branch kh√¥ng ƒë∆∞·ª£c deploy" && exit 1
          fi
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json"
  notify:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          STATUS="${{ job.status }}"
          payload="{\"content\": \"üöÄ Pipeline finished with status: ${STATUS} for **${{ github.repository }}** on branch \`${GITHUB_REF_NAME}\`\\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\\nSonar: https://sonarcloud.io/dashboard?id=CTD03_student-management\"}"
          curl -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_WEBHOOK_URL"
